{% block type %}
<?php

namespace Admingenerated\{{ namespace_prefix }}{{ bundle_name }}\Form\Base{{ builder.BaseGeneratorName }}Type;

use Admingenerator\GeneratorBundle\Form\BaseType;
use Admingenerator\GeneratorBundle\Form\BaseOptions;
use Symfony\Component\Form\FormBuilderInterface;
use JMS\SecurityExtraBundle\Security\Authorization\Expression\Expression;

class FiltersType extends BaseType
{
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->groups = $options['groups'];

    {% for column in builder.filterColumns %}
        if ($this->canDisplay{{ column.name|classify|php_name }}()) {
            $builder->add('{{ column.name }}', $this->getType{{ column.name|classify|php_name }}(), $this->getOptions{{ column.name|classify|php_name }}($options));
        }
    {% endfor %}
    }

    {% for column in builder.filterColumns %}
        /**
        * Get form type for {{ column.name }} field.
        *
        * @return string|FormTypeInterface Field form type.
        */
        protected function getType{{ column.name|classify|php_name }}()
        {
        return $this->inject('{{ column.filterType }}');
        }

        /**
        * Get options for {{ column.name }} field.
        *
        * @param  array $builderOptions The builder options.
        * @return array Field options.
        */
        protected function getOptions{{ column.name|classify|php_name }}(array $builderOptions = array())
        {
            $optionsClass = '{{ namespace_prefix }}\{{ bundle_name }}\Form\Type\{{ builder.BaseGeneratorName }}\Options';
            $options = class_exists($optionsClass) ? new $optionsClass() : null;

            return $this->resolveOptions('{{ column.name }}', {{ {
                    'label': column.label,
                    'translation_domain': i18n_catalog|default('Admin'),
                    'required': false
                }|merge(column.filterOptions)|as_php|convert_as_form(column.filterType) }}, $builderOptions, $options
            );
        }

        /**
        * Check filters groups for {{ column.name }} field.
        *
        * @return boolean
        */
        protected function canDisplay{{ column.name|classify|php_name }}()
        {
            return $this->checkGroups({{ column.filtersGroups|as_php }});
        }
    {% endfor %}

    public function getName()
    {
        return 'filters_{{ bundle_name|lower }}_{{ builder.ModelClass|lower }}';
    }
}
{% endblock %}
